package bharati.binita.storm.trident.eg4;

import storm.trident.Stream;
import storm.trident.TridentTopology;
import storm.trident.operation.builtin.Count;
import backtype.storm.Config;
import backtype.storm.StormSubmitter;
import backtype.storm.generated.AlreadyAliveException;
import backtype.storm.generated.InvalidTopologyException;
import backtype.storm.generated.StormTopology;
import backtype.storm.tuple.Fields;

/**
 * 
 * @author binita.bharati@gmail.com
 * Demo of static field in a Spout and its effect w.r.t parallelism.
 * Static field is only shared across tasks(threads) spawned on same Worker. Same wont be shared across Workers (ie different JVM)
 * Observed that when a worker dird, and new worker was started, the new Worker knew nothing about the last static value
 * that the earlier Worker was holding.
 * https://groups.google.com/forum/#!topic/storm-user/Dlpg3G8rx7w
 
 *
 */

public class ExampleTopology {
	
	public static StormTopology buildTopology()
	
	{
		TridentTopology topology = new TridentTopology();
		RandomPhraseSpout spout1 = new RandomPhraseSpout();
		
		Stream inputStream = topology.newStream("dumbo", spout1).parallelismHint(20);//where is dumbo used ? No where as per as I see.
		
		/**
		 * persistentAggregate : The persistentAggregate operation updates a source of state.
		 * persistentAggregate is an additional abstraction built on top of partitionPersist that knows how to take a 
		 * Trident aggregator and use it to apply updates to the source of state.
		 * Args:
		 * StateFactory instance - This factory implement the makeState API, that should return a instance of State.
		 * Fields list, that needs to be persisted. These field list should be present in the input stream.
		 * StateUpdater instance - The StateUpdater instance will update the underlying State.
		 */
		 inputStream
		    //input stream generated by spout1 has a field called randomPhrase.
		    //RandomPhraseSplitter takes a randomPhrase and additionally emits a field called randomWord into the stream.
		    .each(new Fields("randomPhrase"), new RandomPhraseSplitter(), new Fields("randomWord")).parallelismHint(6);
		    
		 return topology.build();
	}

	public static void main(String[] args) throws Exception {
		
		Config conf = new Config();
		conf.put("redisServerIP", args[0]);
		conf.put("redisServerPort", args[1]);
		conf.put("phraseCount", "4");

		StormSubmitter.submitTopology("trident-eg4", conf,
        		buildTopology());
	
	}

}
